"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const portkey_ai_1 = require("portkey-ai");
(0, dotenv_1.config)({ override: true });
const client = new portkey_ai_1.Portkey({
    apiKey: (_a = process.env["PORTKEY_API_KEY"]) !== null && _a !== void 0 ? _a : "",
    virtualKey: (_b = process.env["OPENAI_VIRTUAL_KEY"]) !== null && _b !== void 0 ? _b : ""
});
describe('OpenAI Assistants APIs', () => {
    test('assistant: create: documentation', () => __awaiter(void 0, void 0, void 0, function* () {
        const myAssistant = yield client.beta.assistants.create({
            instructions: "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
            name: "Math Tutor",
            tools: [{ type: "code_interpreter" }],
            model: "gpt-4",
        });
        expect(myAssistant).toBeDefined();
        expect(myAssistant.tools).toBeDefined();
        expect(myAssistant.tools.length).toBeGreaterThan(0);
    }));
});
//# sourceMappingURL=openai.test.js.map