"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Locator = void 0;
const async_retry_1 = __importDefault(require("async-retry"));
const types_1 = require("../types");
const utils_1 = require("../utils");
const errors_1 = require("../types/errors");
let Locator = (() => {
    let _instanceExtraInitializers = [];
    let _fill_decorators;
    let _sendKeyStrokes_decorators;
    let _tap_decorators;
    let _getText_decorators;
    let _scroll_decorators;
    return class Locator {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _fill_decorators = [utils_1.boxedStep];
            _sendKeyStrokes_decorators = [utils_1.boxedStep];
            _tap_decorators = [utils_1.boxedStep];
            _getText_decorators = [utils_1.boxedStep];
            _scroll_decorators = [utils_1.boxedStep];
            __esDecorate(this, null, _fill_decorators, { kind: "method", name: "fill", static: false, private: false, access: { has: obj => "fill" in obj, get: obj => obj.fill }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _sendKeyStrokes_decorators, { kind: "method", name: "sendKeyStrokes", static: false, private: false, access: { has: obj => "sendKeyStrokes" in obj, get: obj => obj.sendKeyStrokes }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _tap_decorators, { kind: "method", name: "tap", static: false, private: false, access: { has: obj => "tap" in obj, get: obj => obj.tap }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _getText_decorators, { kind: "method", name: "getText", static: false, private: false, access: { has: obj => "getText" in obj, get: obj => obj.getText }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _scroll_decorators, { kind: "method", name: "scroll", static: false, private: false, access: { has: obj => "scroll" in obj, get: obj => obj.scroll }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        webDriverClient = __runInitializers(this, _instanceExtraInitializers);
        timeoutOpts;
        selector;
        findStrategy;
        textToMatch;
        constructor(webDriverClient, timeoutOpts, 
        // Used for find elements request that is sent to Appium server
        selector, findStrategy, 
        // Used to filter elements received from Appium server
        textToMatch) {
            this.webDriverClient = webDriverClient;
            this.timeoutOpts = timeoutOpts;
            this.selector = selector;
            this.findStrategy = findStrategy;
            this.textToMatch = textToMatch;
        }
        async fill(value, options) {
            const isElementDisplayed = await this.isVisible(options);
            if (isElementDisplayed) {
                const element = await this.getElement();
                if (element) {
                    await this.webDriverClient.elementSendKeys(element["element-6066-11e4-a52e-4f735466cecf"], value);
                }
                else {
                    throw new Error(`Failed to fill: Element "${this.selector}" is not found`);
                }
            }
            else {
                throw new Error(`Failed to fill: Element "${this.selector}" not visible`);
            }
        }
        async sendKeyStrokes(value, options) {
            const isElementDisplayed = await this.isVisible(options);
            if (isElementDisplayed) {
                const element = await this.getElement();
                if (element) {
                    await this.webDriverClient.elementClick(element["element-6066-11e4-a52e-4f735466cecf"]);
                    const actions = value
                        .split("")
                        .map((char) => [
                        { type: "keyDown", value: char },
                        { type: "keyUp", value: char },
                    ])
                        .flat();
                    await this.webDriverClient.performActions([
                        {
                            type: "key",
                            id: "keyboard",
                            actions: actions,
                        },
                    ]);
                    await this.webDriverClient.releaseActions();
                }
                else {
                    throw new Error(`Failed to sendKeyStrokes: Element "${this.selector}" is not found`);
                }
            }
            else {
                throw new Error(`Failed to sendKeyStrokes: Element "${this.selector}" not visible`);
            }
        }
        async isVisible(options) {
            try {
                await this.waitFor("visible", options);
                return true;
            }
            catch (err) {
                if (err instanceof errors_1.TimeoutError) {
                    return false;
                }
                throw err;
            }
        }
        async waitFor(state, options) {
            const timeoutFromConfig = this.timeoutOpts.expectTimeout;
            const timeout = options?.timeout || timeoutFromConfig;
            const result = await this.waitUntil(async () => {
                const element = await this.getElement();
                if (element && element["element-6066-11e4-a52e-4f735466cecf"]) {
                    if (state === "attached") {
                        return true;
                    }
                    else if (state === "visible") {
                        try {
                            const isDisplayed = await this.webDriverClient.isElementDisplayed(element["element-6066-11e4-a52e-4f735466cecf"]);
                            return isDisplayed;
                        }
                        catch (error) {
                            //@ts-ignore
                            const errName = error.name;
                            if (errName &&
                                errName.includes(types_1.WebDriverErrors.StaleElementReferenceError)) {
                                throw new errors_1.RetryableError(`Stale element detected: ${error}`);
                            }
                            throw error;
                        }
                    }
                }
                return false;
            }, timeout);
            return result;
        }
        async waitUntil(condition, timeout) {
            const fn = condition.bind(this.webDriverClient);
            try {
                return await (0, async_retry_1.default)(async () => {
                    const result = await fn();
                    if (result === false) {
                        throw new errors_1.RetryableError(`condition returned false`);
                    }
                    return result;
                }, {
                    maxRetryTime: timeout,
                    retries: Math.ceil(timeout / 1000),
                    factor: 1,
                });
            }
            catch (err) {
                if (err instanceof errors_1.RetryableError) {
                    // Last attempt failed, no longer retryable
                    throw new errors_1.TimeoutError(`waitUntil condition timed out after ${timeout}ms`);
                }
                else {
                    throw err;
                }
            }
        }
        async tap(options) {
            const isElementDisplayed = await this.isVisible(options);
            if (isElementDisplayed) {
                const element = await this.getElement();
                if (element) {
                    await this.webDriverClient.elementClick(element["element-6066-11e4-a52e-4f735466cecf"]);
                }
                else {
                    throw new Error(`Failed to tap: Element "${this.selector}" not found`);
                }
            }
            else {
                throw new Error(`Failed to tap: Element "${this.selector}" not visible`);
            }
        }
        async getText(options) {
            const isElementDisplayed = await this.isVisible(options);
            if (isElementDisplayed) {
                const element = await this.getElement();
                if (element) {
                    return await this.webDriverClient.getElementText(element["element-6066-11e4-a52e-4f735466cecf"]);
                }
                else {
                    throw new Error(`Failed to getText: Element "${this.selector}" is not found`);
                }
            }
            else {
                throw new Error(`Failed to getText: Element "${this.selector}" not visible`);
            }
        }
        async scroll(direction) {
            const element = await this.getElement();
            if (!element) {
                throw new Error(`Failed to scroll: Element "${this.selector}" not found`);
            }
            if (this.webDriverClient.isAndroid) {
                await this.webDriverClient.executeScript("mobile: scrollGesture", [
                    {
                        elementId: element["element-6066-11e4-a52e-4f735466cecf"],
                        direction: direction,
                        percent: 1,
                    },
                ]);
            }
            else {
                await this.webDriverClient.executeScript("mobile: scroll", [
                    {
                        elementId: element["element-6066-11e4-a52e-4f735466cecf"],
                        direction: direction,
                    },
                ]);
            }
        }
        /**
         * Retrieves the element reference based on the `selector`.
         *
         * @returns
         */
        async getElement() {
            /**
             * Determine whether `path` is a regex or string, and find elements accordingly.
             *
             * If `path` is a regex:
             * - Iterate through all the elements on the page
             * - Extract text content of each element
             * - Return the first matching element
             *
             * If `path` is a string:
             * - Use `findStrategy` (either XPath, Android UIAutomator, or iOS predicate string) to find elements
             * - Apply regex to clean extra characters from the matched element’s text
             * - Return the first element that matches
             */
            let elements = await this.webDriverClient.findElements(this.findStrategy, this.selector);
            // If there is only one element, return it
            if (elements.length === 1) {
                return elements[0];
            }
            // If there are multiple elements, we reverse the order since the probability
            // of finding the element is higher at higher depth
            const reversedElements = elements.reverse();
            for (const element of reversedElements) {
                let elementText = await this.webDriverClient.getElementText(element["element-6066-11e4-a52e-4f735466cecf"]);
                if (this.textToMatch) {
                    if (this.textToMatch instanceof RegExp &&
                        this.textToMatch.test(elementText)) {
                        return element;
                    }
                    if (typeof this.textToMatch === "string" &&
                        elementText.includes(this.textToMatch)) {
                        return element;
                    }
                }
                else {
                    // This is returned for cases where xpath is findStrategy and we want
                    // to return the last element found in the list
                    return element;
                }
            }
            return null;
        }
    };
})();
exports.Locator = Locator;
