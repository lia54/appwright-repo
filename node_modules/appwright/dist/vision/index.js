"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisionProvider = void 0;
const vision_1 = require("@empiricalrun/llm/vision");
const point_1 = require("@empiricalrun/llm/vision/point");
const fs_1 = __importDefault(require("fs"));
const test_1 = __importDefault(require("@playwright/test"));
const utils_1 = require("../utils");
const logger_1 = require("../logger");
let VisionProvider = (() => {
    let _instanceExtraInitializers = [];
    let _query_decorators;
    let _tap_decorators;
    return class VisionProvider {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
            _query_decorators = [utils_1.boxedStep];
            _tap_decorators = [utils_1.boxedStep];
            __esDecorate(this, null, _query_decorators, { kind: "method", name: "query", static: false, private: false, access: { has: obj => "query" in obj, get: obj => obj.query }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(this, null, _tap_decorators, { kind: "method", name: "tap", static: false, private: false, access: { has: obj => "tap" in obj, get: obj => obj.tap }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        device = __runInitializers(this, _instanceExtraInitializers);
        webDriverClient;
        constructor(device, webDriverClient) {
            this.device = device;
            this.webDriverClient = webDriverClient;
        }
        async query(prompt, options) {
            test_1.default.skip(!process.env.OPENAI_API_KEY, "LLM vision based extract text is not enabled. Set the OPENAI_API_KEY environment variable to enable it");
            let base64Screenshot = options?.screenshot;
            if (!base64Screenshot) {
                base64Screenshot = await this.webDriverClient.takeScreenshot();
            }
            return await (0, vision_1.query)(base64Screenshot, prompt, options);
        }
        async tap(prompt, options) {
            test_1.default.skip(!process.env.EMPIRICAL_API_KEY, "LLM vision based tap is not enabled. Set the EMPIRICAL_API_KEY environment variable to enable it");
            const base64Image = await this.webDriverClient.takeScreenshot();
            const coordinates = await (0, point_1.getCoordinatesFor)(prompt, base64Image, options);
            if (coordinates.annotatedImage) {
                const random = Math.floor(1000 + Math.random() * 9000);
                const file = test_1.default.info().outputPath(`${random}.png`);
                await fs_1.default.promises.writeFile(file, Buffer.from(coordinates.annotatedImage, "base64"));
                await test_1.default.info().attach(`${random}`, { path: file });
            }
            const driverSize = await this.webDriverClient.getWindowRect();
            const { container: imageSize, x, y } = coordinates;
            const scaleFactorWidth = imageSize.width / driverSize.width;
            const scaleFactorHeight = imageSize.height / driverSize.height;
            if (scaleFactorWidth !== scaleFactorHeight) {
                logger_1.logger.warn(`Scale factors are different: ${scaleFactorWidth} vs ${scaleFactorHeight}`);
            }
            const tapTargetX = x / scaleFactorWidth;
            // This uses the width scale factor because getWindowRect on LambdaTest returns a smaller
            // height value than the screenshot height, which causes disproportionate scaling
            // for width and height.
            // For example, Pixel 8 screenshot is 1080 (w) x 2400 (h), but LambdaTest returns
            // 1080 (w) x 2142 (h) for getWindowRect.
            const tapTargetY = y / scaleFactorWidth;
            await this.device.tap({
                x: tapTargetX,
                y: tapTargetY,
            });
            return { x: tapTargetX, y: tapTargetY };
        }
    };
})();
exports.VisionProvider = VisionProvider;
