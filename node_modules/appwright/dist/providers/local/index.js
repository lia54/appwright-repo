"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalDeviceProvider = void 0;
const types_1 = require("../../types");
const device_1 = require("../../device");
const appium_1 = require("../appium");
const utils_1 = require("../../utils");
const logger_1 = require("../../logger");
class LocalDeviceProvider {
    project;
    sessionId;
    constructor(project, appBundleId) {
        this.project = project;
        if (appBundleId) {
            logger_1.logger.log(`Bundle id is specified (${appBundleId}) but ignored for local device provider.`);
        }
    }
    async getDevice() {
        return await this.createDriver();
    }
    async globalSetup() {
        (0, utils_1.validateBuildPath)(this.project.use.buildPath, this.project.use.platform == types_1.Platform.ANDROID ? ".apk" : ".ipa");
        if (this.project.use.platform == types_1.Platform.ANDROID) {
            const androidHome = process.env.ANDROID_HOME;
            if (!androidHome) {
                return Promise.reject("The ANDROID_HOME environment variable is not set. This variable is required to locate your Android SDK. Please set it to the correct path of your Android SDK installation. For detailed instructions on how to set up the Android SDK path, visit: https://developer.android.com/tools");
            }
        }
    }
    async createDriver() {
        await (0, appium_1.installDriver)(this.project.use.platform == types_1.Platform.ANDROID
            ? "uiautomator2"
            : "xcuitest");
        await (0, appium_1.startAppiumServer)(this.project.use.device?.provider);
        const WebDriver = (await import("webdriver")).default;
        const webDriverClient = await WebDriver.newSession(await this.createConfig());
        this.sessionId = webDriverClient.sessionId;
        const bundleId = await (0, appium_1.getAppBundleId)(this.project.use.buildPath);
        const expectTimeout = this.project.use.expectTimeout;
        const testOptions = {
            expectTimeout,
        };
        return new device_1.Device(webDriverClient, bundleId, testOptions, this.project.use.device?.provider);
    }
    async createConfig() {
        const platformName = this.project.use.platform;
        let appPackageName;
        let appLaunchableActivity;
        if (platformName == types_1.Platform.ANDROID) {
            const { packageName, launchableActivity } = await (0, appium_1.getApkDetails)(this.project.use.buildPath);
            appPackageName = packageName;
            appLaunchableActivity = launchableActivity;
        }
        let udid = this.project.use.device.udid;
        if (!udid) {
            if (platformName == types_1.Platform.IOS) {
                udid = await (0, appium_1.getConnectedIOSDeviceUDID)();
            }
            else {
                const activeAndroidDevices = await (0, appium_1.getActiveAndroidDevices)();
                if (activeAndroidDevices > 1) {
                    logger_1.logger.warn(`Multiple active devices detected. Selecting one for the test. 
To specify a device, use the udid property. Run "adb devices" to get the UDID for active devices.`);
                }
            }
        }
        return {
            port: 4723,
            capabilities: {
                "appium:deviceName": this.project.use.device?.name,
                "appium:udid": udid,
                "appium:automationName": platformName == types_1.Platform.ANDROID ? "uiautomator2" : "xcuitest",
                platformName: platformName,
                "appium:autoGrantPermissions": true,
                "appium:app": this.project.use.buildPath,
                "appium:appActivity": appLaunchableActivity,
                "appium:appPackage": appPackageName,
                "appium:autoAcceptAlerts": true,
                "appium:fullReset": true,
                "appium:deviceOrientation": this.project.use.device?.orientation,
                "appium:settings[snapshotMaxDepth]": 62,
            },
        };
    }
}
exports.LocalDeviceProvider = LocalDeviceProvider;
