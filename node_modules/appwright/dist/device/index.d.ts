import type { Client as WebDriverClient } from "webdriver";
import { AppwrightLocator, ExtractType, Platform, TimeoutOptions } from "../types";
import { z } from "zod";
import { LLMModel } from "@empiricalrun/llm";
export declare class Device {
    private webDriverClient;
    private bundleId;
    private timeoutOpts;
    private provider;
    constructor(webDriverClient: WebDriverClient, bundleId: string | undefined, timeoutOpts: TimeoutOptions, provider: string);
    locator({ selector, findStrategy, textToMatch, }: {
        selector: string;
        findStrategy: string;
        textToMatch?: string | RegExp;
    }): AppwrightLocator;
    private vision;
    beta: {
        tap: (prompt: string, options?: {
            useCache?: boolean;
            telemetry?: {
                tags?: string[];
            };
        }) => Promise<{
            x: number;
            y: number;
        }>;
        query: <T extends z.ZodType>(prompt: string, options?: {
            responseFormat?: T;
            model?: LLMModel;
            screenshot?: string;
            telemetry?: {
                tags?: string[];
            };
        }) => Promise<ExtractType<T>>;
    };
    /**
     * Closes the automation session. This is called automatically after each test.
     *
     * **Usage:**
     * ```js
     * await device.close();
     * ```
     */
    close(): Promise<void>;
    /**
     * Tap on the screen at the given coordinates, specified as x and y. The top left corner
     * of the screen is { x: 0, y: 0 }.
     *
     * **Usage:**
     * ```js
     * await device.tap({ x: 100, y: 100 });
     * ```
     *
     * @param coordinates to tap on
     * @returns
     */
    tap({ x, y }: {
        x: number;
        y: number;
    }): Promise<void>;
    /**
     * Locate an element on the screen with text content. This method defaults to a
     * substring match, and this be overridden by setting the `exact` option to `true`.
     *
     * **Usage:**
     * ```js
     * // with string
     * const submitButton = device.getByText("Submit");
     *
     * // with RegExp
     * const counter = device.getByText(/^Counter: \d+/);
     * ```
     *
     * @param text string or regular expression to search for
     * @param options
     * @returns
     */
    getByText(text: string | RegExp, { exact }?: {
        exact?: boolean;
    }): AppwrightLocator;
    /**
     * Locate an element on the screen with accessibility identifier. This method defaults to
     * a substring match, and this can be overridden by setting the `exact` option to `true`.
     *
     * **Usage:**
     * ```js
     * const element = await device.getById("signup_button");
     * ```
     *
     * @param text string to search for
     * @param options
     * @returns
     */
    getById(text: string, { exact }?: {
        exact?: boolean;
    }): AppwrightLocator;
    /**
     * Locate an element on the screen with xpath.
     *
     * **Usage:**
     * ```js
     * const element = await device.getByXpath(`//android.widget.Button[@text="Confirm"]`);
     * ```
     *
     * @param xpath xpath to locate the element
     * @returns
     */
    getByXpath(xpath: string): AppwrightLocator;
    /**
     * Helper method to detect the mobile OS running on the device.
     *
     * **Usage:**
     * ```js
     * const platform = device.getPlatform();
     * ```
     *
     * @returns "android" or "ios"
     */
    getPlatform(): Platform;
    terminateApp(bundleId?: string): Promise<void>;
    activateApp(bundleId?: string): Promise<void>;
    /**
     * Retrieves text content from the clipboard of the mobile device. This is useful
     * after a "copy to clipboard" action has been performed. This returns base64 encoded string.
     *
     * **Usage:**
     * ```js
     * const clipboardText = await device.getClipboardText();
     * ```
     *
     * @returns Returns the text content of the clipboard in base64 encoded string.
     */
    getClipboardText(): Promise<string>;
    /**
     * Sets a mock camera view using the specified image. This injects a mock image into the camera view.
     * Currently, this functionality is supported only for BrowserStack.
     *
     * **Usage:**
     * ```js
     * await device.setMockCameraView(`screenshot.png`);
     * ```
     *
     * @param imagePath path to the image file that will be used as the mock camera view.
     * @returns
     */
    setMockCameraView(imagePath: string): Promise<void>;
    pause(): Promise<void>;
    waitForTimeout(timeout: number): Promise<void>;
    /**
     * Get a screenshot of the current screen as a base64 encoded string.
     */
    screenshot(): Promise<string>;
    /**
     * [iOS Only]
     * Scroll the screen from 0.2 to 0.8 of the screen height.
     * This can be used for controlled scroll, for auto scroll checkout `scroll` method from locator.
     *
     * **Usage:**
     * ```js
     * await device.scroll();
     * ```
     *
     */
    scroll(): Promise<void>;
    /**
     * Send keys to already focused input field.
     * To fill input fields using the selectors use `sendKeyStrokes` method from locator
     */
    sendKeyStrokes(value: string): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map