import { AppwrightLocator, DeviceProvider, ActionOptions } from "../types";
import { Device } from "../device";
type TestLevelFixtures = {
    /**
     * Device provider to be used for the test.
     * This creates and manages the device lifecycle for the test
     */
    deviceProvider: DeviceProvider;
    /**
     * The device instance that will be used for running the test.
     * This provides the functionality to interact with the device
     * during the test.
     */
    device: Device;
};
type WorkerLevelFixtures = {
    persistentDevice: Device;
};
export declare const test: import("@playwright/test").TestType<import("@playwright/test").PlaywrightTestArgs & import("@playwright/test").PlaywrightTestOptions & TestLevelFixtures, import("@playwright/test").PlaywrightWorkerArgs & import("@playwright/test").PlaywrightWorkerOptions & WorkerLevelFixtures>;
/**
 * Function to extend Playwrightâ€™s expect assertion capabilities.
 * This adds a new method `toBeVisible` which checks if an element is visible on the screen.
 *
 * @param locator The AppwrightLocator that locates the element on the device screen.
 * @param options
 * @returns
 */
export declare const expect: import("@playwright/test").Expect<{
    toBeVisible: (locator: AppwrightLocator, options?: ActionOptions) => Promise<{
        message: () => "" | "Element was not found on the screen";
        pass: boolean;
        name: string;
        expected: boolean;
        actual: boolean;
    }>;
}>;
export {};
//# sourceMappingURL=index.d.ts.map