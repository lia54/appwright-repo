"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exports = exports.Logs = void 0;
const apiResource_1 = require("../apiResource.js");
const createHeaders_1 = require("./createHeaders.js");
const utils_1 = require("../utils.js");
const constants_1 = require("../constants.js");
class Logs extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.exports = new Exports(client);
    }
    create(_body, params, opts) {
        const body = _body;
        if (params) {
            const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
        }
        const response = this.post(constants_1.LOGS_API, Object.assign({ body }, opts));
        return response;
    }
}
exports.Logs = Logs;
class Exports extends apiResource_1.ApiResource {
    create(_body, params, opts) {
        const { workspaceId, requestedData } = _body, rest = __rest(_body, ["workspaceId", "requestedData"]);
        const body = Object.assign(Object.assign({}, rest), { workspace_id: workspaceId, requested_data: requestedData });
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.post('/logs/exports', Object.assign({ body }, opts));
        return response;
    }
    retrieve(_body, params, opts) {
        const body = _body;
        const exportId = body.exportId;
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.getMethod(`/logs/exports/${exportId}`, Object.assign({}, opts));
        return response;
    }
    list(_body, params, opts) {
        const { workspaceId } = _body, rest = __rest(_body, ["workspaceId"]);
        const body = Object.assign(Object.assign({}, rest), { workspace_id: workspaceId });
        const query = (0, utils_1.toQueryParams)(body);
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.getMethod(`/logs/exports${query}`, Object.assign({}, opts));
        return response;
    }
    update(_body, params, opts) {
        const { workspaceId, requestedData } = _body, rest = __rest(_body, ["workspaceId", "requestedData"]);
        const body = Object.assign(Object.assign({}, rest), { workspace_id: workspaceId, requested_data: requestedData });
        const exportId = body.exportId;
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.put(`/logs/exports/${exportId}`, Object.assign({ body }, opts));
        return response;
    }
    start(_body, params, opts) {
        const body = _body;
        const exportId = body.exportId;
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.post(`/logs/exports/${exportId}/start`, Object.assign({ body }, opts));
        return response;
    }
    cancel(_body, params, opts) {
        const body = _body;
        const exportId = body.exportId;
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.post(`/logs/exports/${exportId}/cancel`, Object.assign({ body }, opts));
        return response;
    }
    download(_body, params, opts) {
        const body = _body;
        const exportId = body.exportId;
        if (params) {
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign({}, params)));
        }
        const response = this.getMethod(`/logs/exports/${exportId}/download`, Object.assign({ body }, opts));
        return response;
    }
}
exports.Exports = Exports;
//# sourceMappingURL=logsExport.js.map