"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Images = void 0;
const apiResource_1 = require("../apiResource.js");
const utils_1 = require("../utils.js");
const createHeaders_1 = require("./createHeaders.js");
class Images extends apiResource_1.ApiResource {
    generate(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const result = yield OAIclient.images.generate(body, opts).withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    edit(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const result = yield OAIclient.images.edit(body, opts).withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    createVariation(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const result = yield OAIclient.images
                .createVariation(body, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Images = Images;
//# sourceMappingURL=images.js.map