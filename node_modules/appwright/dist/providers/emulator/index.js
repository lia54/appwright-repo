"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmulatorProvider = void 0;
const types_1 = require("../../types");
const device_1 = require("../../device");
const appium_1 = require("../appium");
const utils_1 = require("../../utils");
const logger_1 = require("../../logger");
class EmulatorProvider {
    project;
    sessionId;
    constructor(project, appBundleId) {
        this.project = project;
        if (appBundleId) {
            logger_1.logger.log(`Bundle id is specified (${appBundleId}) but ignored for Emulator provider.`);
        }
    }
    async getDevice() {
        return await this.createDriver();
    }
    async globalSetup() {
        (0, utils_1.validateBuildPath)(this.project.use.buildPath, this.project.use.platform == types_1.Platform.ANDROID ? ".apk" : ".app");
        if (this.project.use.platform == types_1.Platform.ANDROID) {
            const androidHome = process.env.ANDROID_HOME;
            const androidSimulatorConfigDocLink = "https://github.com/empirical-run/appwright/blob/main/docs/config.md#android-emulator";
            if (!androidHome) {
                throw new Error(`The ANDROID_HOME environment variable is not set. 
This variable is required to locate your Android SDK.
Please set it to the correct path of your Android SDK installation. 
Follow the steps mentioned in ${androidSimulatorConfigDocLink} to run test on Android emulator.`);
            }
            const javaHome = process.env.JAVA_HOME;
            if (!javaHome) {
                throw new Error(`The JAVA_HOME environment variable is not set.  
Follow the steps mentioned in ${androidSimulatorConfigDocLink} to run test on Android emulator.`);
            }
            await (0, appium_1.isEmulatorInstalled)(this.project.use.platform);
        }
    }
    async createDriver() {
        await (0, appium_1.installDriver)(this.project.use.platform == types_1.Platform.ANDROID
            ? "uiautomator2"
            : "xcuitest");
        await (0, appium_1.startAppiumServer)(this.project.use.device?.provider);
        const WebDriver = (await import("webdriver")).default;
        const webDriverClient = await WebDriver.newSession(await this.createConfig());
        this.sessionId = webDriverClient.sessionId;
        const expectTimeout = this.project.use.expectTimeout;
        const testOptions = {
            expectTimeout,
        };
        return new device_1.Device(webDriverClient, undefined, testOptions, this.project.use.device?.provider);
    }
    async createConfig() {
        const platformName = this.project.use.platform;
        let appPackageName;
        let appLaunchableActivity;
        if (platformName == types_1.Platform.ANDROID) {
            const { packageName, launchableActivity } = await (0, appium_1.getApkDetails)(this.project.use.buildPath);
            appPackageName = packageName;
            appLaunchableActivity = launchableActivity;
        }
        return {
            port: 4723,
            capabilities: {
                "appium:deviceName": this.project.use.device?.name,
                "appium:automationName": platformName == types_1.Platform.ANDROID ? "uiautomator2" : "xcuitest",
                "appium:platformVersion": this.project.use.device
                    .osVersion,
                "appium:appActivity": appLaunchableActivity,
                "appium:appPackage": appPackageName,
                platformName: platformName,
                "appium:autoGrantPermissions": true,
                "appium:app": this.project.use.buildPath,
                "appium:autoAcceptAlerts": true,
                "appium:fullReset": true,
                "appium:deviceOrientation": this.project.use.device?.orientation,
                "appium:settings[snapshotMaxDepth]": 62,
                "appium:wdaLaunchTimeout": 300_000,
            },
        };
    }
}
exports.EmulatorProvider = EmulatorProvider;
