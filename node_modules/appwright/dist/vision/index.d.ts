import { Client as WebDriverClient } from "webdriver";
import { Device } from "../device";
import { z } from "zod";
import { LLMModel } from "@empiricalrun/llm";
import { ExtractType } from "../types";
export interface AppwrightVision {
    /**
     * Extracts text from the screenshot based on the specified prompt.
     * Ensure the `OPENAI_API_KEY` environment variable is set to authenticate the API request.
     *
     * **Usage:**
     * ```js
     * await device.beta.query("Extract contact details present in the footer from the screenshot");
     * ```
     *
     * @param prompt that defines the specific area or context from which text should be extracted.
     * @returns
     */
    query<T extends z.ZodType>(prompt: string, options?: {
        responseFormat?: T;
        model?: LLMModel;
        screenshot?: string;
        telemetry?: {
            tags?: string[];
        };
    }): Promise<ExtractType<T>>;
    /**
     * Performs a tap action on the screen based on the provided prompt.
     * Ensure the `EMPIRICAL_API_KEY` environment variable is set to authenticate the API request.
     *
     * **Usage:**
     * ```js
     * await device.beta.tap("Tap on the search button");
     * ```
     *
     * @param prompt that defines where on the screen the tap action should occur
     */
    tap(prompt: string, options?: {
        useCache?: boolean;
        telemetry?: {
            tags?: string[];
        };
    }): Promise<{
        x: number;
        y: number;
    }>;
}
export declare class VisionProvider {
    private device;
    private webDriverClient;
    constructor(device: Device, webDriverClient: WebDriverClient);
    query<T extends z.ZodType>(prompt: string, options?: {
        responseFormat?: T;
        model?: LLMModel;
        screenshot?: string;
    }): Promise<ExtractType<T>>;
    tap(prompt: string, options?: {
        useCache?: boolean;
    }): Promise<{
        x: number;
        y: number;
    }>;
}
//# sourceMappingURL=index.d.ts.map