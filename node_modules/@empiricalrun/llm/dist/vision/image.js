"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawBoxOnImage = exports.drawRedDotAtPoint = exports.dimensions = void 0;
const image_size_1 = __importDefault(require("image-size"));
const sharp_1 = __importDefault(require("sharp"));
function dimensions(base64Image) {
    const imgBuffer = Buffer.from(base64Image, "base64");
    const dimensions = (0, image_size_1.default)(imgBuffer);
    if (!dimensions.width || !dimensions.height) {
        throw new Error("Failed to get image dimensions");
    }
    return { width: dimensions.width, height: dimensions.height };
}
exports.dimensions = dimensions;
async function drawRedDotAtPoint(base64Image, point) {
    const imgBuffer = Buffer.from(base64Image, "base64");
    const dotSize = 20;
    const redPoint = Buffer.from(`<svg width="${dotSize}" height="${dotSize}">
      <rect x="0" y="0" width="${dotSize}" height="${dotSize}" fill="red" />
    </svg>`);
    const composedBuffer = await (0, sharp_1.default)(imgBuffer)
        .composite([
        {
            input: redPoint,
            top: Math.round(point.y - dotSize / 2),
            left: Math.round(point.x - dotSize / 2),
        },
    ])
        .toBuffer();
    return composedBuffer.toString("base64");
}
exports.drawRedDotAtPoint = drawRedDotAtPoint;
async function drawBoxOnImage(base64Image, bbox) {
    const imgBuffer = Buffer.from(base64Image, "base64");
    const boxWidth = bbox.corners.max.x - bbox.corners.min.x;
    const boxHeight = bbox.corners.max.y - bbox.corners.min.y;
    const centerBoxSize = 6;
    const halfCenterBox = centerBoxSize / 2;
    const svgOverlay = Buffer.from(`<svg width="${bbox.container.width}" height="${bbox.container.height}">
      <!-- Bounding box rectangle -->
      <rect x="${bbox.corners.min.x}" y="${bbox.corners.min.y}" 
            width="${boxWidth}" height="${boxHeight}" 
            fill="none" stroke="red" stroke-width="2"/>
      <!-- Center box -->
      <rect x="${bbox.center.x - halfCenterBox}" y="${bbox.center.y - halfCenterBox}" 
            width="${centerBoxSize}" height="${centerBoxSize}" 
            fill="red"/>
    </svg>`);
    const composedBuffer = await (0, sharp_1.default)(imgBuffer)
        .composite([{ input: svgOverlay, blend: "over" }])
        .toBuffer();
    const base64Output = composedBuffer.toString("base64");
    const imageFormat = (await (0, sharp_1.default)(imgBuffer).metadata()).format;
    return `data:image/${imageFormat};base64,${base64Output}`;
}
exports.drawBoxOnImage = drawBoxOnImage;
