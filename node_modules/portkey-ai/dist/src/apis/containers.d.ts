import { ContainerCreateParams, ContainerCreateResponse, ContainerListParams, ContainerRetrieveResponse } from 'openai/resources/index';
import { ApiResource } from '../apiResource';
import { ApiClientInterface } from '../_types/generalTypes';
import { RequestOptions } from '../baseClient';
import { FileCreateParams, FileCreateResponse, FileListParams, FileRetrieveResponse } from 'openai/resources/containers/files/files';
export declare class Containers extends ApiResource {
    files: ContainersFiles;
    constructor(client: any);
    create(_body: ContainerCreateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<ContainerCreateResponse>;
    retrieve(containerId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<ContainerRetrieveResponse>;
    list(query?: ContainerListParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    del(containerId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<void>;
}
export declare class ContainersFiles extends ApiResource {
    content: Content;
    constructor(client: any);
    create(containerId: string, body: FileCreateParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<FileCreateResponse>;
    retrieve(containerId: string, fileId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<FileRetrieveResponse>;
    list(containerId: string, query?: FileListParams, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
    del(containerId: string, fileId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<void>;
}
export declare class Content extends ApiResource {
    retrieve(containerId: string, fileId: string, params?: ApiClientInterface, opts?: RequestOptions): Promise<any>;
}
