"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Permissions = exports.FineTuningCheckpoints = exports.Grader = exports.Alpha = exports.Checkpoints = exports.Jobs = exports.FineTuning = void 0;
const apiResource_1 = require("../apiResource.js");
const utils_1 = require("../utils.js");
const createHeaders_1 = require("./createHeaders.js");
class FineTuning extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.jobs = new Jobs(client);
        this.checkpoints = new FineTuningCheckpoints(client);
        this.alpha = new Alpha(client);
    }
}
exports.FineTuning = FineTuning;
class Jobs extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.checkpoints = new Checkpoints(client);
    }
    create(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.jobs
                .create(body, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    retrieve(fineTuningJobId, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.jobs
                .retrieve(fineTuningJobId, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    list(_query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = _query;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.jobs
                .list(query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    cancel(fineTuningJobId, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const body = {};
            const options = Object.assign({ body }, opts);
            const result = yield OAIclient.fineTuning.jobs
                .cancel(fineTuningJobId, options)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    listEvents(fineTuningJobId, _query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = _query;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.jobs
                .listEvents(fineTuningJobId, query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Jobs = Jobs;
class Checkpoints extends apiResource_1.ApiResource {
    list(fineTuningJobId, _query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = _query;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.jobs.checkpoints
                .list(fineTuningJobId, query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Checkpoints = Checkpoints;
class Alpha extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.grader = new Grader(client);
    }
}
exports.Alpha = Alpha;
class Grader extends apiResource_1.ApiResource {
    run(body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.alpha.graders
                .run(body, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    validate(body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.alpha.graders
                .validate(body, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Grader = Grader;
class FineTuningCheckpoints extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.permissions = new Permissions(client);
    }
}
exports.FineTuningCheckpoints = FineTuningCheckpoints;
class Permissions extends apiResource_1.ApiResource {
    create(fineTunedModelCheckpoint, body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.checkpoints.permissions
                .create(fineTunedModelCheckpoint, body, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    retrieve(fineTunedModelCheckpoint, query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.checkpoints.permissions
                .retrieve(fineTunedModelCheckpoint, query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    del(fineTunedModelCheckpoint, permissionId, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.fineTuning.checkpoints.permissions
                .del(fineTunedModelCheckpoint, permissionId, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Permissions = Permissions;
//# sourceMappingURL=fineTuning.js.map