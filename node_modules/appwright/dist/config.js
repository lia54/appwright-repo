"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineConfig = defineConfig;
const test_1 = require("@playwright/test");
const path_1 = __importDefault(require("path"));
const logger_1 = require("./logger");
const resolveGlobalSetup = () => {
    const pathToInstalledAppwright = require.resolve(".");
    const directory = path_1.default.dirname(pathToInstalledAppwright);
    return path_1.default.join(directory, "global-setup.js");
};
const resolveVideoReporter = () => {
    const pathToInstalledAppwright = require.resolve(".");
    const directory = path_1.default.dirname(pathToInstalledAppwright);
    return path_1.default.join(directory, "reporter.js");
};
const defaultConfig = {
    globalSetup: resolveGlobalSetup(),
    testDir: "./tests",
    // This is turned off so that a persistent device fixture can be
    // used across tests in a file where they run sequentially
    fullyParallel: false,
    forbidOnly: false,
    retries: process.env.CI ? 2 : 0,
    workers: 2,
    reporter: [["list"], ["html", { open: "always" }]],
    use: {
        // TODO: Use this for actions
        actionTimeout: 20_000,
        expectTimeout: 20_000,
    },
    expect: {
        // This is not used right now
        timeout: 20_000,
    },
    timeout: 0,
};
function defineConfig(config) {
    const hasGlobalSetup = config.globalSetup !== undefined;
    if (hasGlobalSetup) {
        logger_1.logger.warn("The `globalSetup` parameter in config will be ignored. See https://github.com/empirical-run/appwright/issues/57");
        delete config.globalSetup;
    }
    let reporterConfig;
    if (config.reporter) {
        reporterConfig = config.reporter;
    }
    else {
        reporterConfig = [["list"], ["html", { open: "always" }]];
    }
    return (0, test_1.defineConfig)({
        ...defaultConfig,
        ...config,
        reporter: [[resolveVideoReporter()], ...reporterConfig],
        use: {
            ...defaultConfig.use,
            expectTimeout: config.use?.expectTimeout
                ? config.use.expectTimeout
                : defaultConfig.use?.expectTimeout,
        },
    });
}
