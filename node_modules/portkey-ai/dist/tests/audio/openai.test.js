"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const portkey_ai_1 = require("portkey-ai");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
(0, dotenv_1.config)({ override: true });
const client = new portkey_ai_1.Portkey({
    apiKey: (_a = process.env["PORTKEY_API_KEY"]) !== null && _a !== void 0 ? _a : "",
    virtualKey: (_b = process.env["OPENAI_VIRTUAL_KEY"]) !== null && _b !== void 0 ? _b : ""
});
describe("Openai Audio APIs", () => {
    test("Speech: only required params", () => __awaiter(void 0, void 0, void 0, function* () {
        const speechFile = path_1.default.resolve("./speech.mp3");
        const response = yield client.audio.speech.create({
            model: "tts-1",
            voice: "alloy",
            input: "The quick brown fox jumps over the lazy dog"
        });
        const buffer = Buffer.from(yield response.arrayBuffer());
        yield fs_1.default.promises.writeFile(speechFile, buffer);
        expect(response).toBeDefined();
    }));
    test("Transcription: only required params", () => __awaiter(void 0, void 0, void 0, function* () {
        const transcription = yield client.audio.transcriptions.create({
            file: fs_1.default.createReadStream("./speech.mp3"),
            model: "whisper-1",
        });
        expect(transcription).toBeDefined();
        expect(transcription.text).toBeDefined();
    }));
    test("Translation: only required params", () => __awaiter(void 0, void 0, void 0, function* () {
        const transcription = yield client.audio.translations.create({
            file: fs_1.default.createReadStream("./speech.mp3"),
            model: "whisper-1",
        });
        expect(transcription).toBeDefined();
        expect(transcription.text).toBeDefined();
    }));
});
//# sourceMappingURL=openai.test.js.map