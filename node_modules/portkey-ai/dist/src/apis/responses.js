"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputItems = exports.Responses = void 0;
const apiResource_1 = require("../apiResource.js");
const createHeaders_1 = require("./createHeaders.js");
const utils_1 = require("../utils.js");
class Responses extends apiResource_1.ApiResource {
    constructor(client) {
        super(client);
        this.inputItems = new InputItems(client);
    }
    create(body, params, opts) {
        if (params) {
            const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
            this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
        }
        const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
        const result = OAIclient.responses.create(body, opts);
        return result;
    }
    retrieve(responseId, _query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = _query;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.responses
                .retrieve(responseId, query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    del(responseId, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.responses
                .del(responseId, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
    parse(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.responses.parse(body, opts);
            return result;
        });
    }
    stream(_body, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = _body;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.responses.stream(body, opts);
            return result;
        });
    }
    cancel(responseId, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const body = {};
            const options = Object.assign({ body }, opts);
            const result = yield OAIclient.responses
                .cancel(responseId, options)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.Responses = Responses;
class InputItems extends apiResource_1.ApiResource {
    list(responseId, _query, params, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const query = _query;
            if (params) {
                const config = (0, utils_1.overrideConfig)(this.client.config, params.config);
                this.client.customHeaders = Object.assign(Object.assign({}, this.client.customHeaders), (0, createHeaders_1.createHeaders)(Object.assign(Object.assign({}, params), { config })));
            }
            const OAIclient = (0, utils_1.initOpenAIClient)(this.client);
            const result = yield OAIclient.responses.inputItems
                .list(responseId, query, opts)
                .withResponse();
            return (0, utils_1.finalResponse)(result);
        });
    }
}
exports.InputItems = InputItems;
//# sourceMappingURL=responses.js.map